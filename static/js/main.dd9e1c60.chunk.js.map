{"version":3,"sources":["logo.svg","components/LocalStorage.js","apis/todos.js","components/IndexedDB.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","storedValue","window","localStorage","getItem","initialValue","LocalStorage","state","value","handleChange","e","_this","setState","target","handleSubmit","preventDefault","setItem","removeItem","this","react_default","a","createElement","react","onSubmit","onChange","type","PureComponent","db","Dexie","version","stores","todos","fetchTodos","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","_todos","wrap","_context","prev","next","open","fetch","sent","json","table","clear","bulkAdd","abrupt","t0","toArray","stop","apply","arguments","IndexedDB","map","todo","key","id","title","App","contentCached","updateAvailable","className","src","logo","alt","href","rel","LocalStorage_LocalStorage","IndexedDB_IndexedDB","isLocalhost","Boolean","location","hostname","match","register","config","navigator","URL","process","origin","addEventListener","swUrl","concat","then","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","Index","handleUpdate","handleSuccess","_this$state","src_App","ReactDOM","render","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.dd9e1c60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment, PureComponent } from 'react';\n\nconst storedValue = window.localStorage.getItem('value');\nconst initialValue = storedValue === null ? '' : storedValue;\n\nexport default class LocalStorage extends PureComponent {\n  state = {\n    value: initialValue,\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Fragment>\n        <h4>LocalStorage Example</h4>\n        <form onSubmit={this.handleSubmit}>\n          <input onChange={this.handleChange} value={value} />\n          <button type=\"submit\">Save</button>\n        </form>\n      </Fragment>\n    )\n  }\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  handleSubmit = e => {\n    const { value } = this.state;\n    e.preventDefault();\n    if (value === '') {\n      window.localStorage.removeItem('value');\n      return;\n    }\n    window.localStorage.setItem('value', value);\n  };\n}\n","import Dexie from \"dexie\";\n\nconst URL = \"https://jsonplaceholder.typicode.com/todos\";\nconst db = new Dexie(\"MyAppDatabase\");\ndb.version(1).stores({\n  todos: \"id, title, userId, completed\"\n});\n\nexport const fetchTodos = async () => {\n  await db.open();\n  try {\n    const response = await fetch(URL);\n    const todos = await response.json();\n    await db.table('todos').clear();\n    await db.table('todos').bulkAdd(todos);\n    return todos;\n  } catch (error) {\n    const todos = await db\n      .table('todos')\n      .toArray();\n    return todos;\n  }\n};\n","import React, { Fragment, PureComponent } from 'react';\nimport { fetchTodos } from '../apis/todos';\n\nexport default class IndexedDB extends PureComponent {\n  state = {\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await fetchTodos();\n    this.setState({ todos });\n  }\n\n  render() {\n    const { todos } = this.state;\n    return (\n      <Fragment>\n        <h4>IndexedDB Example</h4>\n        <ul>\n          {todos.map(todo => <li key={todo.id}>{todo.title}</li>)}\n        </ul>\n      </Fragment>\n    )\n  }\n}\n","import { PropTypes } from 'prop-types';\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LocalStorage from './components/LocalStorage';\nimport IndexedDB from './components/IndexedDB';\n\nfunction App({ contentCached, updateAvailable }) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React (Progressive Web Apps)\n        </a>\n        <p>E</p>\n        {updateAvailable && <p>New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.</p>}\n        {contentCached && <p>Content is cached for offline use.</p>}\n        <LocalStorage />\n        <IndexedDB />\n      </header>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  contentCached: PropTypes.bool.isRequired,\n  updateAvailable: PropTypes.bool.isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Index extends PureComponent {\n  state = {\n    contentCached: false,\n    updateAvailable: false,\n  };\n\n  componentDidMount() {\n    const config = {\n      onSuccess: this.handleSuccess,\n      onUpdate: this.handleUpdate,\n    }\n    serviceWorker.register(config);\n  }\n\n  render() {\n    const { contentCached, updateAvailable } = this.state;\n    return <App contentCached={contentCached} updateAvailable={updateAvailable} />;\n  }\n\n  handleUpdate = () => {\n    this.setState({ updateAvailable: true});\n  }\n\n  handleSuccess = () => {\n    this.setState({ contentCached: true });\n  }\n}\n\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}