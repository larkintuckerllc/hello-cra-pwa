{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","_ref","contentCached","updateAvailable","react_default","a","createElement","className","src","logo","alt","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","origin","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","Index","handleUpdate","_this","setState","handleSuccess","this","_this$state","src_App","PureComponent","ReactDOM","render","src_Index","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"+OAkCeA,MA7Bf,SAAAC,GAAiD,IAAlCC,EAAkCD,EAAlCC,cAAeC,EAAmBF,EAAnBE,gBAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,gFACLC,OAAO,SACPC,IAAI,uBAJN,sCAQAT,EAAAC,EAAAC,cAAA,cACCH,GAAmBC,EAAAC,EAAAC,cAAA,0HACnBJ,GAAiBE,EAAAC,EAAAC,cAAA,kDCXpBQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIC,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,iBAAwBR,OAAOC,SAASN,MACpDc,SAAWT,OAAOC,SAASQ,OAIvC,OAGFT,OAAOU,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAMJ,iBAAN,sBAEPV,IAgEV,SAAiCa,EAAON,GAEtCQ,MAAMF,GACHG,KAAK,SAAAC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5Cd,UAAUe,cAAcC,MAAMR,KAAK,SAAAS,GACjCA,EAAaC,aAAaV,KAAK,WAC7Bd,OAAOC,SAASwB,aAKpBC,EAAgBf,EAAON,KAG1BsB,MAAM,WACLC,QAAQC,IACN,mEArFAC,CAAwBnB,EAAON,GAI/BC,UAAUe,cAAcC,MAAMR,KAAK,WACjCc,QAAQC,IACN,gHAMJH,EAAgBf,EAAON,MAM/B,SAASqB,EAAgBf,EAAON,GAC9BC,UAAUe,cACPjB,SAASO,GACTG,KAAK,SAAAS,GACJA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf7B,UAAUe,cAAce,YAI1BR,QAAQC,IACN,iHAKExB,GAAUA,EAAOgC,UACnBhC,EAAOgC,SAASd,KAMlBK,QAAQC,IAAI,sCAGRxB,GAAUA,EAAOiC,WACnBjC,EAAOiC,UAAUf,UAO5BI,MAAM,SAAAY,GACLX,QAAQW,MAAM,4CAA6CA,SC1F3DC,6MACJL,MAAQ,CACNjD,eAAe,EACfC,iBAAiB,KAgBnBsD,aAAe,WACbC,EAAKC,SAAS,CAAExD,iBAAiB,OAGnCyD,cAAgB,WACdF,EAAKC,SAAS,CAAEzD,eAAe,wFAb/BmC,EAJe,CACbiB,UAAWO,KAAKD,cAChBP,SAAUQ,KAAKJ,gDAKV,IAAAK,EACoCD,KAAKV,MAAxCjD,EADD4D,EACC5D,cAAeC,EADhB2D,EACgB3D,gBACvB,OAAOC,EAAAC,EAAAC,cAACyD,EAAD,CAAK7D,cAAeA,EAAeC,gBAAiBA,WAhB3C6D,iBA6BpBC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAAWC,SAASC,eAAe,4BCnCnDC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a3cb9490.chunk.js","sourcesContent":["import { PropTypes } from 'prop-types';\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App({ contentCached, updateAvailable }) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React (Progressive Web Apps)\n        </a>\n        <p>E</p>\n        {updateAvailable && <p>New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.</p>}\n        {contentCached && <p>Content is cached for offline use.</p>}\n      </header>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  contentCached: PropTypes.bool.isRequired,\n  updateAvailable: PropTypes.bool.isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Index extends PureComponent {\n  state = {\n    contentCached: false,\n    updateAvailable: false,\n  };\n\n  componentDidMount() {\n    const config = {\n      onSuccess: this.handleSuccess,\n      onUpdate: this.handleUpdate,\n    }\n    serviceWorker.register(config);\n  }\n\n  render() {\n    const { contentCached, updateAvailable } = this.state;\n    return <App contentCached={contentCached} updateAvailable={updateAvailable} />;\n  }\n\n  handleUpdate = () => {\n    this.setState({ updateAvailable: true});\n  }\n\n  handleSuccess = () => {\n    this.setState({ contentCached: true });\n  }\n}\n\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}